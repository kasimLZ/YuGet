// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YuGet.Database.SQLite;

namespace YuGet.Database.SQLite.Migrations
{
    [DbContext(typeof(SQLiteDbContext))]
    partial class SQLiteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("YuGet.Database.Models.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanCreatePackage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanDeletePackage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanUpdatePackage")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExprieDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OwnerTeamMemberId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pattern")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("OwnerTeamMemberId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("YuGet.Database.Models.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Authors")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<long>("Downloads")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasEmbeddedIcon")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasReadme")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrerelease")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<string>("Language")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("LicenseUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Listed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MinClientVersion")
                        .HasMaxLength(44)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedVersionString")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT COLLATE NOCASE")
                        .HasColumnName("Version");

                    b.Property<string>("OriginalVersionString")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("OriginalVersion");

                    b.Property<string>("ProjectUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Published")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReleaseNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("RepositoryType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RepositoryUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequireLicenseAcceptance")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("BLOB");

                    b.Property<int>("SemVerLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Summary")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("Id", "NormalizedVersionString")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("YuGet.Database.Models.PackageDependency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetFramework")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionRange")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageDependencies");
                });

            modelBuilder.Entity("YuGet.Database.Models.PackageTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TagId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("TagId");

                    b.ToTable("PackageTags");
                });

            modelBuilder.Entity("YuGet.Database.Models.PackageType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageTypes");
                });

            modelBuilder.Entity("YuGet.Database.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("YuGet.Database.Models.TargetFramework", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Moniker")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT COLLATE NOCASE");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Moniker");

                    b.HasIndex("PackageId");

                    b.ToTable("TargetFrameworks");
                });

            modelBuilder.Entity("YuGet.Database.Models.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShowName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserPassword")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("YuGet.Database.Models.WorkTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WorkTeams");
                });

            modelBuilder.Entity("YuGet.Database.Models.WorkTeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkTeamsMember");
                });

            modelBuilder.Entity("YuGet.Database.Models.ApiKey", b =>
                {
                    b.HasOne("YuGet.Database.Models.UserAccount", "Owner")
                        .WithMany("ApiKeys")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YuGet.Database.Models.WorkTeamMember", "OwnerTeamMember")
                        .WithMany("ApiKeys")
                        .HasForeignKey("OwnerTeamMemberId");

                    b.Navigation("Owner");

                    b.Navigation("OwnerTeamMember");
                });

            modelBuilder.Entity("YuGet.Database.Models.PackageDependency", b =>
                {
                    b.HasOne("YuGet.Database.Models.Package", "Package")
                        .WithMany("Dependencies")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("YuGet.Database.Models.PackageTag", b =>
                {
                    b.HasOne("YuGet.Database.Models.Package", "Package")
                        .WithMany("Tags")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YuGet.Database.Models.Tag", "Tag")
                        .WithMany("Packages")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("YuGet.Database.Models.PackageType", b =>
                {
                    b.HasOne("YuGet.Database.Models.Package", "Package")
                        .WithMany("PackageTypes")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("YuGet.Database.Models.TargetFramework", b =>
                {
                    b.HasOne("YuGet.Database.Models.Package", "Package")
                        .WithMany("TargetFrameworks")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("YuGet.Database.Models.WorkTeamMember", b =>
                {
                    b.HasOne("YuGet.Database.Models.WorkTeam", "WorkTeam")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YuGet.Database.Models.UserAccount", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkTeam");
                });

            modelBuilder.Entity("YuGet.Database.Models.Package", b =>
                {
                    b.Navigation("Dependencies");

                    b.Navigation("PackageTypes");

                    b.Navigation("Tags");

                    b.Navigation("TargetFrameworks");
                });

            modelBuilder.Entity("YuGet.Database.Models.Tag", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("YuGet.Database.Models.UserAccount", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("YuGet.Database.Models.WorkTeam", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("YuGet.Database.Models.WorkTeamMember", b =>
                {
                    b.Navigation("ApiKeys");
                });
#pragma warning restore 612, 618
        }
    }
}
